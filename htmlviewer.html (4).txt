<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Display Animation</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        }
        
        body {
            display: flex;
            justify-content: center;
            align-items: center;
            min-height: 100vh;
            background: linear-gradient(135deg, #1a2a6c, #b21f1f, #fdbb2d);
            overflow: hidden;
            padding: 20px;
        }
        
        .container {
            width: 90%;
            max-width: 1200px;
            text-align: center;
            color: white;
        }
        
        h1 {
            font-size: 3.5rem;
            margin-bottom: 30px;
            text-shadow: 0 2px 10px rgba(0, 0, 0, 0.3);
            opacity: 0;
            transform: translateY(-30px);
            animation: fadeInDown 1s forwards 0.5s;
        }
        
        .subtitle {
            font-size: 1.5rem;
            margin-bottom: 50px;
            opacity: 0;
            transform: translateY(20px);
            animation: fadeInUp 1s forwards 1s;
        }
        
        .display-container {
            display: flex;
            flex-wrap: wrap;
            justify-content: center;
            gap: 30px;
            margin: 40px 0;
        }
        
        .card {
            width: 250px;
            height: 300px;
            background: rgba(255, 255, 255, 0.1);
            backdrop-filter: blur(10px);
            border-radius: 15px;
            padding: 20px;
            display: flex;
            flex-direction: column;
            justify-content: center;
            align-items: center;
            box-shadow: 0 10px 25px rgba(0, 0, 0, 0.2);
            border: 1px solid rgba(255, 255, 255, 0.2);
            transform: scale(0);
            opacity: 0;
            transition: transform 0.5s, box-shadow 0.3s;
        }
        
        .card:nth-child(1) {
            animation: scaleIn 0.8s forwards 1.5s;
        }
        
        .card:nth-child(2) {
            animation: scaleIn 0.8s forwards 1.8s;
        }
        
        .card:nth-child(3) {
            animation: scaleIn 0.8s forwards 2.1s;
        }
        
        .card:hover {
            transform: translateY(-10px) scale(1.05);
            box-shadow: 0 15px 30px rgba(0, 0, 0, 0.3);
        }
        
        .card-icon {
            font-size: 4rem;
            margin-bottom: 20px;
            color: #ffcc00;
        }
        
        .card-title {
            font-size: 1.5rem;
            margin-bottom: 15px;
        }
        
        .card-content {
            font-size: 1rem;
            line-height: 1.5;
        }
        
        .pulse-circle {
            position: absolute;
            width: 20px;
            height: 20px;
            border-radius: 50%;
            background: rgba(255, 255, 255, 0.5);
            pointer-events: none;
            opacity: 0;
        }
        
        .buttons {
            margin-top: 40px;
            opacity: 0;
            animation: fadeIn 1s forwards 2.5s;
        }
        
        button {
            background: rgba(255, 255, 255, 0.2);
            border: none;
            color: white;
            padding: 12px 30px;
            margin: 0 10px;
            border-radius: 50px;
            font-size: 1rem;
            cursor: pointer;
            transition: all 0.3s;
            backdrop-filter: blur(5px);
            border: 1px solid rgba(255, 255, 255, 0.3);
        }
        
        button:hover {
            background: rgba(255, 255, 255, 0.3);
            transform: translateY(-3px);
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.2);
        }
        
        .particles {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            z-index: -1;
        }
        
        @keyframes fadeInDown {
            to {
                opacity: 1;
                transform: translateY(0);
            }
        }
        
        @keyframes fadeInUp {
            to {
                opacity: 1;
                transform: translateY(0);
            }
        }
        
        @keyframes fadeIn {
            to {
                opacity: 1;
            }
        }
        
        @keyframes scaleIn {
            to {
                opacity: 1;
                transform: scale(1);
            }
        }
        
        @keyframes float {
            0%, 100% {
                transform: translateY(0);
            }
            50% {
                transform: translateY(-20px);
            }
        }
        
        @media (max-width: 768px) {
            h1 {
                font-size: 2.5rem;
            }
            
            .subtitle {
                font-size: 1.2rem;
            }
            
            .card {
                width: 100%;
                max-width: 300px;
            }
        }
    </style>
</head>
<body>
    <div class="particles" id="particles"></div>
    
    <div class="container">
        <h1>Animated Display</h1>
        <p class="subtitle">Smooth animations and interactive elements</p>
        
        <div class="display-container">
            <div class="card">
                <div class="card-icon">âœ¨</div>
                <h3 class="card-title">Smooth Animations</h3>
                <p class="card-content">Elegant transitions and entrance effects for a polished user experience.</p>
            </div>
            
            <div class="card">
                <div class="card-icon">ðŸŽ¨</div>
                <h3 class="card-title">Visual Appeal</h3>
                <p class="card-content">Beautiful gradients, shadows, and glassmorphism effects.</p>
            </div>
            
            <div class="card">
                <div class="card-icon">âš¡</div>
                <h3 class="card-title">Interactive Elements</h3>
                <p class="card-content">Hover effects and dynamic responses to user actions.</p>
            </div>
        </div>
        
        <div class="buttons">
            <button id="restartBtn">Restart Animation</button>
            <button id="pulseBtn">Create Pulse</button>
        </div>
    </div>

    <script>
        // Create floating particles in background
        function createParticles() {
            const particlesContainer = document.getElementById('particles');
            const colors = ['#ffcc00', '#ff3366', '#3366ff', '#00cc99'];
            
            for (let i = 0; i < 50; i++) {
                const particle = document.createElement('div');
                particle.classList.add('pulse-circle');
                
                // Random properties
                const size = Math.random() * 20 + 5;
                const posX = Math.random() * 100;
                const posY = Math.random() * 100;
                const color = colors[Math.floor(Math.random() * colors.length)];
                const duration = Math.random() * 20 + 10;
                const delay = Math.random() * 5;
                
                // Apply styles
                particle.style.width = `${size}px`;
                particle.style.height = `${size}px`;
                particle.style.background = color;
                particle.style.left = `${posX}%`;
                particle.style.top = `${posY}%`;
                particle.style.animation = `float ${duration}s ease-in-out ${delay}s infinite`;
                
                particlesContainer.appendChild(particle);
            }
        }
        
        // Create pulse effect on click
        function createPulse(x, y) {
            const pulse = document.createElement('div');
            pulse.classList.add('pulse-circle');
            
            document.body.appendChild(pulse);
            
            // Position the pulse at click coordinates
            pulse.style.left = `${x}px`;
            pulse.style.top = `${y}px`;
            
            // Animate the pulse
            pulse.animate([
                { transform: 'scale(0)', opacity: 0.8 },
                { transform: 'scale(4)', opacity: 0 }
            ], {
                duration: 1000,
                easing: 'ease-out'
            });
            
            // Remove element after animation
            setTimeout(() => {
                pulse.remove();
            }, 1000);
        }
        
        // Restart animations
        function restartAnimations() {
            const animatedElements = document.querySelectorAll('.card, h1, .subtitle, .buttons');
            
            animatedElements.forEach(el => {
                // Reset animation
                el.style.animation = 'none';
                
                // Trigger reflow
                void el.offsetWidth;
                
                // Reapply animation with appropriate delays
                if (el.classList.contains('card')) {
                    const index = Array.from(el.parentNode.children).indexOf(el);
                    el.style.animation = `scaleIn 0.8s forwards ${1.5 + index * 0.3}s`;
                } else if (el.tagName === 'H1') {
                    el.style.animation = 'fadeInDown 1s forwards 0.5s';
                } else if (el.classList.contains('subtitle')) {
                    el.style.animation = 'fadeInUp 1s forwards 1s';
                } else if (el.classList.contains('buttons')) {
                    el.style.animation = 'fadeIn 1s forwards 2.5s';
                }
            });
        }
        
        // Event listeners
        document.getElementById('restartBtn').addEventListener('click', restartAnimations);
        document.getElementById('pulseBtn').addEventListener('click', function(e) {
            createPulse(e.clientX, e.clientY);
        });
        
        // Create pulse on click anywhere
        document.addEventListener('click', function(e) {
            // Only create pulse if not clicking on buttons
            if (!e.target.closest('button')) {
                createPulse(e.clientX, e.clientY);
            }
        });
        
        // Initialize on load
        window.addEventListener('load', createParticles);
    </script>
</body>
</html>